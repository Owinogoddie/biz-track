generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Auth-related models
model User {
  id               String            @id @unique @default(uuid())
  email            String            @unique
  hashedPassword   String?
  name             String?
  picture          String?
  role             UserRole          @default(USER)
  emailVerified    Boolean           @default(false)
  verificationCode VerificationCode?
  
  businesses       BusinessUser[]    // User can belong to multiple businesses
  ownedBusinesses  Business[]        // Businesses owned by user
  
  sales         Sale[]
  
  sessions        Session[]
  oauthAccounts   OAuthAccount[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model VerificationCode {
  id        String   @id @default(uuid())
  code      String
  userId    String   @unique
  email     String
  type      String?
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @unique @default(uuid())
  userId       String
  expiresAt    DateTime
  sessionToken String?  @unique
  accessToken  String?  @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OAuthAccount {
  provider       String
  providerUserId String
  refreshToken   String?
  userId         String
  user           User    @relation(fields: [userId], references: [id])

  @@id([provider, providerUserId])
}

// models for business system
model Business {
  id            String         @id @default(cuid())
  name          String
  description   String?
  logo          String?
  domain        String?        @unique
  
  // Business details
  address       String?
  phone         String?
  email         String?
  website       String?
  
  // Relations
  ownerId       String
  owner         User           @relation(fields: [ownerId], references: [id])
  users         BusinessUser[]
  products      Product[]
  categories    Category[]
  suppliers     Supplier[]
  customers     Customer[]
  transactions  Transaction[]
  productions   Production[]
  subscription  Subscription?
  sales         Sale[]
  debts Debt[]
expenditures Expenditure[]
  installmentPlans InstallmentPlan[] 
 purchaseOrders PurchaseOrder[]
supplierContracts SupplierContract[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}


model BusinessUser {
  id          String       @id @default(cuid())
  businessId  String
  userId      String
  role        BusinessRole @default(STAFF)
  
  business    Business     @relation(fields: [businessId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([businessId, userId])
}

model Product {
  id          String     @id @default(cuid())
  name        String
  sku         String?    @unique
  barcode     String?    @unique
  description String?
  price       Float
  cost        Float
  quantity    Int
  minQuantity Int       @default(0)
  businessId  String
  categoryId  String    
  unit        String    @default("unit")
  
  // Relations
  category    Category  @relation(fields: [categoryId], references: [id])
  business    Business  @relation(fields: [businessId], references: [id])
  transactions TransactionItem[]
  saleItems   SaleItem[]
  
  // Production relations
  productions Production[] 
  
  installmentPlans InstallmentPlan[] 
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([businessId])
  @@index([categoryId])
}
model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  businessId  String
  business    Business  @relation(fields: [businessId], references: [id])
  products    Product[] // Changed to one-to-many relation
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([businessId, name])
  @@index([businessId])
}

model Sale {
  id            String         @id @default(cuid())
  total         Float
  businessId    String
  sellerId      String
  status        SaleStatus    @default(COMPLETED)
  items         SaleItem[]
  business      Business      @relation(fields: [businessId], references: [id])
  seller        User          @relation(fields: [sellerId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([businessId])
  @@index([sellerId])
}

model SaleItem {
  id          String    @id @default(cuid())
  saleId      String
  productId   String
  quantity    Int
  price       Float
  sale        Sale      @relation(fields: [saleId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([saleId])
  @@index([productId])
}

enum SaleStatus {
  PENDING
  COMPLETED
  CANCELLED
}
model Expenditure {
  id          String      @id @default(cuid())
  businessId  String
  amount      Float
  category    String
  description String
  date        DateTime    @default(now())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  business    Business    @relation(fields: [businessId], references: [id])

  @@index([businessId])
}
model InstallmentPlan {
  id            String    @id @default(cuid())
  totalAmount   Float
  paidAmount    Float     @default(0)
  startDate     DateTime  @default(now())
  endDate       DateTime?
  status        String    @default("ACTIVE") // ACTIVE, COMPLETED, DEFAULTED
  notes         String?
  
  productId     String
  product       Product     @relation(fields: [productId], references: [id])
  customerId    String
  customer      Customer    @relation(fields: [customerId], references: [id])
  businessId    String
  business      Business    @relation(fields: [businessId], references: [id])
  
  payments      InstallmentPayment[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([businessId])
  @@index([customerId])
  @@index([productId])
}

model InstallmentPayment {
  id                String          @id @default(cuid())
  amount           Float
  paymentDate      DateTime        @default(now())
  notes            String?
  
  installmentPlanId String
  installmentPlan   InstallmentPlan @relation(fields: [installmentPlanId], references: [id])
  
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@index([installmentPlanId])
}
model Supplier {
  id          String        @id @default(cuid())
  name        String
  email       String?
  phone       String?
  address     String?
  status      SupplierStatus @default(ACTIVE)
  transactions Transaction[]
  rating      Int?         // 1-5 rating
  taxId       String?
  website     String?
  notes       String?
  
  businessId  String
  business    Business     @relation(fields: [businessId], references: [id])
  
  contacts    SupplierContact[]
  purchaseOrders PurchaseOrder[]
  contracts   SupplierContract[]
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([businessId, name])
}

model SupplierContact {
  id          String    @id @default(cuid())
  name        String
  title       String?
  email       String
  phone       String?
  isPrimary   Boolean   @default(false)
  
  supplierId  String
  supplier    Supplier  @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model PurchaseOrder {
  id          String    @id @default(cuid())
  poNumber    String    // PO-2024-001
  status      POStatus  @default(DRAFT)
  issueDate   DateTime
  deliveryDate DateTime?
  totalAmount Int   @default(0)
  notes       String?
  
  supplierId  String
  supplier    Supplier  @relation(fields: [supplierId], references: [id])
  
  businessId  String
  business    Business  @relation(fields: [businessId], references: [id])
  
  items       POItem[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([businessId, poNumber])
}

model POItem {
  id          String    @id @default(cuid())
  description String
  quantity    Int
  unitPrice   Int
  totalPrice  Int
  
  poId        String
  purchaseOrder PurchaseOrder @relation(fields: [poId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SupplierContract {
  id          String    @id @default(cuid())
  title       String
  startDate   DateTime
  endDate     DateTime?
  status      ContractStatus @default(DRAFT)
  terms       String?   // Contract terms
  value       Int?  // Contract value if applicable
  
  supplierId  String
  supplier    Supplier  @relation(fields: [supplierId], references: [id])
  
  businessId  String
  business    Business  @relation(fields: [businessId], references: [id])
  
  documents   ContractDocument[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ContractDocument {
  id          String    @id @default(cuid())
  name        String
  fileUrl     String
  fileType    String
  
  contractId  String
  contract    SupplierContract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum SupplierStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum POStatus {
  DRAFT
  SENT
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

enum ContractStatus {
  DRAFT
  ACTIVE
  EXPIRED
  TERMINATED
}
model Customer {
  id          String        @id @default(cuid())
  name        String
  email       String?
  phone       String?
  address     String?
  creditLimit Float         @default(0)
  
  businessId  String
  business    Business      @relation(fields: [businessId], references: [id])
  transactions Transaction[]
  debts       Debt[]
  installmentPlans InstallmentPlan[] 
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}
model Production {
  id          String    @id @default(cuid())
  batchNumber String    @unique
  productName String    
  startDate   DateTime
  endDate     DateTime?
  status      String    
  businessId  String
  business    Business  @relation(fields: [businessId], references: [id])
  product     Product?  @relation(fields: [productId], references: [id])
  productId   String?   
  stages      Stage[]
  waste       Waste[]
  outputs     ProductionOutput[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // @@index([businessId])
  // @@index([productId])
}
model Stage {
  id          String    @id @default(cuid())
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  status      StageStatus @default(PENDING)
  order       Int
  production  Production @relation(fields: [productionId], references: [id])
  productionId String
  resources   Resource[]
  workers     Worker[]   
  labor       Labor[]    // New relation to track labor hours
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

}
model Resource {
  id          String    @id @default(cuid())
  name        String
  type        ResourceType  // Updated to use the new enum
  quantity    Float
  unit        String    
  cost        Float?
  stages      Stage[]  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt 
}

model Worker {
  id            String        @id @default(cuid())
  firstName     String
  lastName      String
  email         String?        @unique
  phone         String?
  isCasual      Boolean       @default(false)
  role          String?
  hourlyRate    Float?       
  paymentPeriod PaymentPeriod @default(HOURLY)
  dailyRate     Float?       
  monthlyRate   Float?       
  stages        Stage[]   
  labor         Labor[] 
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt  
}

enum PaymentPeriod {
  HOURLY
  DAILY
  MONTHLY
}

model Labor {
  id          String    @id @default(cuid())
  worker      Worker    @relation(fields: [workerId], references: [id])
  workerId    String
  stage       Stage     @relation(fields: [stageId], references: [id])
  stageId     String
  date        DateTime  // When the work was performed
  hours       Float?    // Optional: Number of hours worked (for hourly workers)
  days        Float?    // Optional: Number of days worked (for daily workers)
  rate        Float?   // Rate based on payment period (hourly/daily/monthly)
  periodType  PaymentPeriod // Type of payment for this specific work period
  notes       String?  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt 
  
  @@index([date])       
}
model ProductionOutput {
  id            String     @id @default(cuid())
  name          String
  description   String?
  quantity      Float
  unit          String
  pricePerUnit  Float
  totalValue    Float
  production    Production @relation(fields: [productionId], references: [id], onDelete: Cascade)
  productionId  String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}


model Waste {
  id            String     @id @default(cuid())
  quantity      Float
  unit          String
  description   String?
  date          DateTime   @default(now())
  production    Production @relation(fields: [productionId], references: [id])
  productionId  String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}
model Transaction {
  id            String            @id @default(cuid())
  type          TransactionType
  status        TransactionStatus @default(PENDING)
  total         Float
  paid          Float            @default(0)
  notes         String?
  
  businessId    String
  business      Business          @relation(fields: [businessId], references: [id])
  customerId    String?           // Made optional
  customer      Customer?         @relation(fields: [customerId], references: [id])
  supplierId    String?
  supplier      Supplier?         @relation(fields: [supplierId], references: [id])
  
  items         TransactionItem[]
  payments      Payment[]
  debt          Debt?
  
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model TransactionItem {
  id            String      @id @default(cuid())
  quantity      Int
  price         Float
  total         Float
  
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  productId     String
  product       Product     @relation(fields: [productId], references: [id])
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Payment {
  id            String        @id @default(cuid())
  amount        Float
  method        PaymentMethod
  reference     String?
  
  transactionId String
  transaction   Transaction   @relation(fields: [transactionId], references: [id])
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Debt {
  id            String      @id @default(cuid())
  amount        Float
  dueDate       DateTime
  status        DebtStatus  @default(PENDING)
  notes         String?
  
  businessId    String
  business      Business          @relation(fields: [businessId], references: [id])
  customerId    String? 
  customerName String?
  customerPhoneNumber String?
  customer      Customer?   @relation(fields: [customerId], references: [id])
  transactionId String      @unique
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}


// Subscription models (modified from original)
model Plan {
  id            String         @id @default(cuid())
  name          String
  description   String
  price         Float
  duration      Int           // Duration in days
  maxBusinesses Int           @default(1)
  features      String[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
}

model Subscription {
  id          String              @id @default(cuid())
  businessId  String              @unique
  business    Business            @relation(fields: [businessId], references: [id])
  planId      String
  plan        Plan                @relation(fields: [planId], references: [id])
  status      SubscriptionStatus
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

enum BusinessRole {
  OWNER
  ADMIN
  MANAGER
  STAFF
}

enum TransactionType {
  SALE
  PURCHASE
  RETURN
  TRANSFER
  CREDIT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  MOBILE_MONEY
  OTHER
}

enum DebtStatus {
  PENDING
  PARTIAL
  PAID
  OVERDUE
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

enum StageStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  SKIPPED
}

enum ResourceType {
  RAW_MATERIAL    // Seeds, raw ingredients
  EQUIPMENT       // Tools, machines
  SUPPLIES        // Packaging, containers
  UTILITIES       // Water, electricity
  CHEMICALS       // Fertilizers, pesticides
  OTHER           // Miscellaneous resources
}


