generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// uth-related models
model User {
  id               String            @id @unique @default(uuid())
  email            String            @unique
  hashedPassword   String?
  name             String?
  picture          String?
  role             UserRole          @default(USER)
  emailVerified    Boolean           @default(false)
  verificationCode VerificationCode?
  
  businesses       BusinessUser[]    // User can belong to multiple businesses
  ownedBusinesses  Business[]        // Businesses owned by user
  
  sessions        Session[]
  oauthAccounts   OAuthAccount[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model VerificationCode {
  id        String   @id @default(uuid())
  code      String
  userId    String   @unique
  email     String
  type      String?
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @unique @default(uuid())
  userId       String
  expiresAt    DateTime
  sessionToken String?  @unique
  accessToken  String?  @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OAuthAccount {
  provider       String
  providerUserId String
  refreshToken   String?
  userId         String
  user           User    @relation(fields: [userId], references: [id])

  @@id([provider, providerUserId])
}

// models for business system
model Business {
  id            String         @id @default(cuid())
  name          String
  description   String?
  logo          String?
  domain        String?        @unique
  
  // Business details
  address       String?
  phone         String?
  email         String?
  website       String?
  
  // Relations
  ownerId       String
  owner         User           @relation(fields: [ownerId], references: [id])
  users         BusinessUser[]
  products      Product[]
  categories    Category[]
  suppliers     Supplier[]
  customers     Customer[]
  transactions  Transaction[]
  subscription  Subscription?
  
  // Production relations
  productions   Production[]
  formulas      ProductionFormula[]

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}


model BusinessUser {
  id          String       @id @default(cuid())
  businessId  String
  userId      String
  role        BusinessRole @default(STAFF)
  
  business    Business     @relation(fields: [businessId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([businessId, userId])
}
model Product {
  id          String     @id @default(cuid())
  name        String
  sku         String?    @unique
  barcode     String?    @unique
  description String?
  price       Float
  cost        Float
  quantity    Int
  minQuantity Int       @default(0)
  businessId  String
  categoryId  String    
  
  // Relations
  category    Category  @relation(fields: [categoryId], references: [id])
  business    Business  @relation(fields: [businessId], references: [id])
  transactions TransactionItem[]
  
  // Production relations
  usedInProductions MaterialUsage[]     // When this product is used in production
  producedBy        ProductionFormula[] // When this product is produced by a formula
  usedInFormulas    FormulaMaterial[]   @relation("ProductAsMaterial")
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([businessId])
  @@index([categoryId])
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  businessId  String
  business    Business  @relation(fields: [businessId], references: [id])
  products    Product[] // Changed to one-to-many relation
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([businessId, name])
  @@index([businessId])
}
model Supplier {
  id          String        @id @default(cuid())
  name        String
  email       String?
  phone       String?
  address     String?
  
  businessId  String
  business    Business      @relation(fields: [businessId], references: [id])
  transactions Transaction[]
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Customer {
  id          String        @id @default(cuid())
  name        String
  email       String?
  phone       String?
  address     String?
  creditLimit Float         @default(0)
  
  businessId  String
  business    Business      @relation(fields: [businessId], references: [id])
  transactions Transaction[]
  debts       Debt[]
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Production {
  id            String            @id @default(cuid())
  name          String
  description   String?
  status        ProductionStatus  @default(PLANNED)
  
  businessId    String
  business      Business          @relation(fields: [businessId], references: [id])
  
  formulaId     String
  formula       ProductionFormula @relation(fields: [formulaId], references: [id])
  
  targetQuantity Float?
  actualQuantity Float?
  estimatedCost  Float?
  actualCost     Float?
  
  startDate     DateTime?
  endDate       DateTime?
  
  steps         ProductionStep[]
  materialUsage MaterialUsage[]
  laborRecords  LaborRecord[]
  qualityChecks QualityCheck[]
  
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@index([businessId])
  @@index([formulaId])
}

model ProductionStep {
  id            String           @id @default(cuid())
  name          String
  description   String?
  status        ProductionStatus @default(PLANNED)
  productionId  String
  production    Production       @relation(fields: [productionId], references: [id])
  orderIndex    Int
  startDate     DateTime?
  endDate       DateTime?
  notes         String?
  result        String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model ProductionFormula {
  id          String       @id @default(cuid())
  name        String
  description String?
  businessId  String
  business    Business     @relation(fields: [businessId], references: [id])
  
  // The product this formula produces
  productId   String
  product     Product      @relation(fields: [productId], references: [id])
  
  // Expected materials and their quantities
  materials   FormulaMaterial[]
  productions Production[]
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([businessId, name])
  @@index([businessId])
  @@index([productId])
}
model FormulaMaterial {
  id          String            @id @default(cuid())
  formulaId   String
  formula     ProductionFormula @relation(fields: [formulaId], references: [id])
  
  materialId  String
  material    Product           @relation("ProductAsMaterial", fields: [materialId], references: [id])
  
  quantity    Float
  unit        String
  
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([formulaId])
  @@index([materialId])
}

model MaterialUsage {
  id            String    @id @default(cuid())
  productionId  String
  production    Production @relation(fields: [productionId], references: [id])
  materialId    String
  material      Product    @relation(fields: [materialId], references: [id])
  targetQuantity Float?
  actualQuantity Float
  unit          String    // e.g., "kg", "liters", "pieces"
  costPerUnit   Float
  totalCost     Float
  usageDate     DateTime
  notes         String?
  qualityStatus MaterialQualityStatus @default(GOOD)
  wasteQuantity Float?
  wasteReason   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model LaborRecord {
  id           String    @id @default(cuid())
  productionId String
  production   Production @relation(fields: [productionId], references: [id])
  workerId     String    // Could be linked to an Employee model in the future
  workerName   String
  taskType     LaborTaskType
  startTime    DateTime
  endTime      DateTime?
  hoursWorked  Float?
  hourlyRate   Float
  totalCost    Float
  notes        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model QualityCheck {
  id           String    @id @default(cuid())
  productionId String
  production   Production @relation(fields: [productionId], references: [id])
  checkType    QualityCheckType
  status       QualityStatus @default(PENDING)
  checkedBy    String
  checkedAt    DateTime
  parameters   Json?     // Flexible storage for different quality parameters
  notes        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}


model Transaction {
  id            String            @id @default(cuid())
  type          TransactionType
  status        TransactionStatus @default(PENDING)
  total         Float
  paid          Float            @default(0)
  notes         String?
  
  businessId    String
  business      Business          @relation(fields: [businessId], references: [id])
  customerId    String?           // Made optional
  customer      Customer?         @relation(fields: [customerId], references: [id])
  supplierId    String?
  supplier      Supplier?         @relation(fields: [supplierId], references: [id])
  
  items         TransactionItem[]
  payments      Payment[]
  debt          Debt?
  
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model TransactionItem {
  id            String      @id @default(cuid())
  quantity      Int
  price         Float
  total         Float
  
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  productId     String
  product       Product     @relation(fields: [productId], references: [id])
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Payment {
  id            String        @id @default(cuid())
  amount        Float
  method        PaymentMethod
  reference     String?
  
  transactionId String
  transaction   Transaction   @relation(fields: [transactionId], references: [id])
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Debt {
  id            String      @id @default(cuid())
  amount        Float
  dueDate       DateTime
  status        DebtStatus  @default(PENDING)
  notes         String?
  
  customerId    String? 
  customerName String?
  customerPhoneNumber String?
  customer      Customer?   @relation(fields: [customerId], references: [id])
  transactionId String      @unique
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}


// Subscription models (modified from original)
model Plan {
  id            String         @id @default(cuid())
  name          String
  description   String
  price         Float
  duration      Int           // Duration in days
  maxBusinesses Int           @default(1)
  features      String[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
}

model Subscription {
  id          String              @id @default(cuid())
  businessId  String              @unique
  business    Business            @relation(fields: [businessId], references: [id])
  planId      String
  plan        Plan                @relation(fields: [planId], references: [id])
  status      SubscriptionStatus
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

enum BusinessRole {
  OWNER
  ADMIN
  MANAGER
  STAFF
}

enum TransactionType {
  SALE
  PURCHASE
  RETURN
  TRANSFER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  MOBILE_MONEY
  OTHER
}

enum DebtStatus {
  PENDING
  PARTIAL
  PAID
  OVERDUE
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

enum MaterialQualityStatus {
  GOOD
  DAMAGED
  EXPIRED
  CONTAMINATED
  BELOW_STANDARD
}
enum ProductionStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}
enum LaborTaskType {
  PREPARATION
  PROCESSING
  QUALITY_CHECK
  PACKAGING
  MAINTENANCE
  CLEANING
  OTHER
}

enum QualityCheckType {
  VISUAL_INSPECTION
  MEASUREMENT
  CHEMICAL_TEST
  TASTE_TEST
  EQUIPMENT_CHECK
  SAFETY_CHECK
}

enum QualityStatus {
  PENDING
  PASSED
  FAILED
  NEEDS_REVIEW
}