
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Auth-related models
model User {
  id               String            @id @unique @default(uuid())
  email            String            @unique
  hashedPassword   String?
  name             String?
  picture          String?
  role             UserRole          @default(USER)
  emailVerified    Boolean           @default(false)
  verificationCode VerificationCode?
  
  businesses       BusinessUser[]    // User can belong to multiple businesses
  ownedBusinesses  Business[]        // Businesses owned by user
  
  sales         Sale[]
  
  sessions        Session[]
  oauthAccounts   OAuthAccount[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model VerificationCode {
  id        String   @id @default(uuid())
  code      String
  userId    String   @unique
  email     String
  type      String?
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @unique @default(uuid())
  userId       String
  expiresAt    DateTime
  sessionToken String?  @unique
  accessToken  String?  @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OAuthAccount {
  provider       String
  providerUserId String
  refreshToken   String?
  userId         String
  user           User    @relation(fields: [userId], references: [id])

  @@id([provider, providerUserId])
}
enum BusinessType {
  PRODUCT      // Default - For retail, wholesale, manufacturing
  SERVICE      // For service providers like consultants, salons
  SUBSCRIPTION // For gyms, membership clubs
  DISTRIBUTION // For distributors to schools, hotels etc
  HYBRID       // For businesses that combine multiple types
}
// models for business system
model Business {
  id            String         @id @default(cuid())
  name          String
  description   String?
  logo          String?
  domain        String?        @unique
  businessType  BusinessType   @default(PRODUCT) 
  
  // Business details
  address       String?
  phone         String?
  email         String?
  website       String?
  
  primaryColor   String?
  secondaryColor String?
  // Relations
  ownerId       String
  owner         User           @relation(fields: [ownerId], references: [id])
  openingBalance Int @default(0)
  users         BusinessUser[]
  products      Product[]
  categories    Category[]
  suppliers     Supplier[]
  customers     Customer[]
  transactions  Transaction[]
  productions   Production[]
  subscription  Subscription?
  sales         Sale[]
    // Service related - optional based on business type
  services      Service[]           // New relation
  appointments  Appointment[]       // New relation
  
  // Subscription related - optional based on business type
  membershipPlans MembershipPlan[] // New relation
  members         Member[]         // New relation
  
  // Distribution related - optional based on business type
  distributionClients DistributionClient[] // New relation
  deliveryRoutes     DeliveryRoute[]      // New relation
  deliverySchedules  DeliverySchedule[]   // New relation
  deliveryOrders DeliveryOrder[]
  debts Debt[]
expenditures Expenditure[]
  installmentPlans InstallmentPlan[] 
 purchaseOrders PurchaseOrder[]
supplierContracts SupplierContract[]
resourceBalances FundingSource[]

  inventoryAssets InventoryAsset[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}


model BusinessUser {
  id          String       @id @default(cuid())
  businessId  String
  userId      String
  role        BusinessRole @default(STAFF)
  
  business    Business     @relation(fields: [businessId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([businessId, userId])
}


model Product {
  id          String     @id @default(cuid())
  name        String
  sku         String?    @unique
  barcode     String?    @unique
  description String?
  price       Float
  cost        Float
  quantity    Int
  minQuantity Int       @default(0)
  businessId  String
  categoryId  String    
  unit        String    @default("unit")
  
  // Relations
  category    Category  @relation(fields: [categoryId], references: [id])
  business    Business  @relation(fields: [businessId], references: [id])
  transactions TransactionItem[]
  saleItems   SaleItem[]
  
  // Production relations
  productions Production[] 

  deliveryOrderItems DeliveryOrderItem[]
  
  installmentPlans InstallmentPlan[] 
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([businessId])
  @@index([categoryId])
}
model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  businessId  String
  business    Business  @relation(fields: [businessId], references: [id])
  products    Product[] // Changed to one-to-many relation
  services Service[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([businessId, name])
  @@index([businessId])
}

// New model for services
model Service {
  id          String       @id @default(cuid())
  name        String
  description String?
  price       Float
  duration    Int          // in minutes
  businessId  String
  categoryId  String?      // Optional category
  
  business    Business     @relation(fields: [businessId], references: [id])
  category    Category?    @relation(fields: [categoryId], references: [id])
  appointments Appointment[]
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([businessId])
  @@index([categoryId])
}

// New model for appointments
model Appointment {
  id          String       @id @default(cuid())
  serviceId   String
  customerId  String
  businessId  String
  startTime   DateTime
  endTime     DateTime
  status      AppointmentStatus @default(SCHEDULED)
  notes       String?
  
  service     Service      @relation(fields: [serviceId], references: [id])
  customer    Customer     @relation(fields: [customerId], references: [id])
  business    Business     @relation(fields: [businessId], references: [id])
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([businessId])
  @@index([serviceId])
  @@index([customerId])
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

// New model for membership plans
model MembershipPlan {
  id          String       @id @default(cuid())
  name        String
  description String?
  price       Float
  duration    Int          // in days
  businessId  String
  features    String[]     // Array of features included in the plan
  
  business    Business     @relation(fields: [businessId], references: [id])
  members     Member[]
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([businessId])
}

// New model for members
model Member {
  id              String         @id @default(cuid())
  customerId      String
  businessId      String
  membershipPlanId String
  startDate       DateTime
  endDate         DateTime
  status          MembershipStatus @default(ACTIVE)
  
  customer        Customer       @relation(fields: [customerId], references: [id])
  business        Business       @relation(fields: [businessId], references: [id])
  membershipPlan  MembershipPlan @relation(fields: [membershipPlanId], references: [id])
  
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([businessId])
  @@index([customerId])
  @@index([membershipPlanId])
}

enum MembershipStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  SUSPENDED
}

// New models for distribution
// Distribution Models
model DistributionClient {
  id            String       @id @default(cuid())
  name          String
  type          ClientType   
  businessId    String
  address       String?
  contactPerson String?
  phone         String?
  email         String?
  
  business      Business     @relation(fields: [businessId], references: [id])
  deliveryRoutes DeliveryRoute[]
  schedules     DeliverySchedule[]
  orders        DeliveryOrder[]
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([businessId])
}

enum ClientType {
  SCHOOL
  HOTEL
  RESTAURANT
  RETAIL_STORE
  OTHER
}

model DeliveryRoute {
  id            String       @id @default(cuid())
  name          String
  businessId    String
  description   String?
  
  business      Business     @relation(fields: [businessId], references: [id])
  clients       DistributionClient[]
  schedules     DeliverySchedule[]
  orders        DeliveryOrder[]
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([businessId])
}

model DeliverySchedule {
  id            String       @id @default(cuid())
  businessId    String
  clientId      String
  routeId       String
  frequency     Frequency    
  dayOfWeek     Int?        
  dayOfMonth    Int?        
  timeWindow    String?     
  
  business      Business     @relation(fields: [businessId], references: [id])
  client        DistributionClient @relation(fields: [clientId], references: [id])
  route         DeliveryRoute @relation(fields: [routeId], references: [id])
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([businessId])
  @@index([clientId])
  @@index([routeId])
}

enum Frequency {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  CUSTOM
}

model DeliveryOrder {
  id            String       @id @default(cuid())
  businessId    String
  clientId      String
  routeId       String
  scheduledDate DateTime
  status        DeliveryStatus
  notes         String?
  
  business      Business     @relation(fields: [businessId], references: [id])
  client        DistributionClient @relation(fields: [clientId], references: [id])
  route         DeliveryRoute @relation(fields: [routeId], references: [id])
  items         DeliveryOrderItem[]
  transaction   DeliveryTransaction?
  payment       Payment?
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([businessId])
  @@index([clientId])
  @@index([routeId])
}

enum DeliveryStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

model DeliveryOrderItem {
  id          String       @id @default(cuid())
  orderId     String
  productId   String
  quantity    Int
  unitPrice   Float
  
  order       DeliveryOrder @relation(fields: [orderId], references: [id])
  product     Product      @relation(fields: [productId], references: [id])
  
  deliveredItems DeliveredItem[]

  @@index([orderId])
  @@index([productId])
}

model DeliveryTransaction {
  id            String       @id @default(cuid())
  orderId       String      @unique
  deliveryDate  DateTime
  status        TransactionStatus
  notes         String?
  
  order         DeliveryOrder @relation(fields: [orderId], references: [id])
  deliveredItems DeliveredItem[]
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([orderId])
}

model DeliveredItem {
  id              String       @id @default(cuid())
  transactionId   String
  orderItemId     String
  quantityDelivered Int
  
  transaction     DeliveryTransaction @relation(fields: [transactionId], references: [id])
  orderItem       DeliveryOrderItem @relation(fields: [orderItemId], references: [id])

  @@index([transactionId])
  @@index([orderItemId])
}

enum TransactionStatus {
  PENDING
  COMPLETED
  PARTIAL
  CANCELLED
}


model Sale {
  id            String         @id @default(cuid())
  total         Float
  businessId    String
  sellerId      String
  status        SaleStatus    @default(COMPLETED)
  items         SaleItem[]
  business      Business      @relation(fields: [businessId], references: [id])
  seller        User          @relation(fields: [sellerId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([businessId])
  @@index([sellerId])
}

model SaleItem {
  id          String    @id @default(cuid())
  saleId      String
  productId   String
  quantity    Int
  price       Float
  sale        Sale      @relation(fields: [saleId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([saleId])
  @@index([productId])
}

enum SaleStatus {
  PENDING
  COMPLETED
  CANCELLED
}
model Expenditure {
  id          String        @id @default(cuid())
  amount      Float
  category    String
  description String
  date        DateTime      @default(now())
  businessId  String
  business    Business      @relation(fields: [businessId], references: [id])
  fundingSourceId String?   // Optional - can be from general sales revenue if null
  fundingSource FundingSource? @relation(fields: [fundingSourceId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([businessId])
  @@index([fundingSourceId])
}
model InstallmentPlan {
  id            String    @id @default(cuid())
  totalAmount   Float
  paidAmount    Float     @default(0)
  startDate     DateTime  @default(now())
  endDate       DateTime?
  status        String    @default("ACTIVE") // ACTIVE, COMPLETED, DEFAULTED
  notes         String?
  
  productId     String
  product       Product     @relation(fields: [productId], references: [id])
  customerId    String
  customer      Customer    @relation(fields: [customerId], references: [id])
  businessId    String
  business      Business    @relation(fields: [businessId], references: [id])
  
  payments      InstallmentPayment[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([businessId])
  @@index([customerId])
  @@index([productId])
}

model InstallmentPayment {
  id                String          @id @default(cuid())
  amount           Float
  paymentDate      DateTime        @default(now())
  notes            String?
  
  installmentPlanId String
  installmentPlan   InstallmentPlan @relation(fields: [installmentPlanId], references: [id])
  
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@index([installmentPlanId])
}
model Supplier {
  id          String        @id @default(cuid())
  name        String
  email       String?
  phone       String?
  address     String?
  status      SupplierStatus @default(ACTIVE)
  transactions Transaction[]
  rating      Int?         // 1-5 rating
  taxId       String?
  website     String?
  notes       String?
  
  businessId  String
  business    Business     @relation(fields: [businessId], references: [id])
  
  contacts    SupplierContact[]
  purchaseOrders PurchaseOrder[]
  contracts   SupplierContract[]
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([businessId, name])
}

model SupplierContact {
  id          String    @id @default(cuid())
  name        String
  title       String?
  email       String
  phone       String?
  isPrimary   Boolean   @default(false)
  
  supplierId  String
  supplier    Supplier  @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model PurchaseOrder {
  id          String    @id @default(cuid())
  poNumber    String    // PO-2024-001
  status      POStatus  @default(DRAFT)
  issueDate   DateTime
  deliveryDate DateTime?
  totalAmount Int   @default(0)
  notes       String?
  
  supplierId  String
  supplier    Supplier  @relation(fields: [supplierId], references: [id])
  
  businessId  String
  business    Business  @relation(fields: [businessId], references: [id])
  
  items       POItem[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([businessId, poNumber])
}

model POItem {
  id          String    @id @default(cuid())
  description String
  quantity    Int
  unitPrice   Int
  totalPrice  Int
  
  poId        String
  purchaseOrder PurchaseOrder @relation(fields: [poId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SupplierContract {
  id          String    @id @default(cuid())
  title       String
  startDate   DateTime
  endDate     DateTime?
  status      ContractStatus @default(DRAFT)
  terms       String?   // Contract terms
  value       Int?  // Contract value if applicable
  
  supplierId  String
  supplier    Supplier  @relation(fields: [supplierId], references: [id])
  
  businessId  String
  business    Business  @relation(fields: [businessId], references: [id])
  
  documents   ContractDocument[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ContractDocument {
  id          String    @id @default(cuid())
  name        String
  fileUrl     String
  fileType    String
  
  contractId  String
  contract    SupplierContract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum SupplierStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum POStatus {
  DRAFT
  SENT
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

enum ContractStatus {
  DRAFT
  ACTIVE
  EXPIRED
  TERMINATED
}
enum MaintenanceStatus {
  GOOD
  NEEDS_ATTENTION
  UNDER_MAINTENANCE
  CRITICAL
}

enum AssetType {
  EQUIPMENT
  VEHICLE
  TOOL
  OTHER
}

model InventoryAsset {
  id              String            @id @default(cuid())
  name            String
  description     String?
  assetType       AssetType
  serialNumber    String?
  purchaseDate    DateTime
  condition       MaintenanceStatus @default(GOOD)
  lastMaintenance DateTime?
  nextMaintenance DateTime?
  notes           String?
  businessId      String
  business        Business          @relation(fields: [businessId], references: [id])
  maintenanceLogs MaintenanceLog[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([businessId])
}

model MaintenanceLog {
  id              String        @id @default(cuid())
  description     String
  date            DateTime
  cost            Float?
  performedBy     String?
  assetId         String
  asset           InventoryAsset @relation(fields: [assetId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([assetId])
}

model Customer {
  id          String        @id @default(cuid())
  name        String
  email       String?
  phone       String?
  address     String?
  creditLimit Float         @default(0)
  
  businessId  String
  business    Business      @relation(fields: [businessId], references: [id])
  transactions Transaction[]
  debts       Debt[]
  installmentPlans InstallmentPlan[] 
  appointments  Appointment[]
  membership    Member[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}
model Production {
  id          String    @id @default(cuid())
  batchNumber String    @unique
  productName String    
  startDate   DateTime
  endDate     DateTime?
  status      String    
  businessId  String
  business    Business  @relation(fields: [businessId], references: [id])
  product     Product?  @relation(fields: [productId], references: [id])
  productId   String?   
  stages      Stage[]
  waste       Waste[]
  outputs     ProductionOutput[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // @@index([businessId])
  // @@index([productId])
}
model Stage {
  id          String    @id @default(cuid())
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  status      StageStatus @default(PENDING)
  order       Int
  production  Production @relation(fields: [productionId], references: [id])
  productionId String
  resources   Resource[]
  workers     Worker[]   
  labor       Labor[]    // New relation to track labor hours
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

}
model Resource {
  id          String    @id @default(cuid())
  name        String
  type        ResourceType  // Updated to use the new enum
  quantity    Float
  unit        String    
  cost        Float?
  stages      Stage[]  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt 
}

model Worker {
  id            String        @id @default(cuid())
  firstName     String
  lastName      String
  email         String?        @unique
  phone         String?
  isCasual      Boolean       @default(false)
  role          String?
  hourlyRate    Float?       
  paymentPeriod PaymentPeriod @default(HOURLY)
  dailyRate     Float?       
  monthlyRate   Float?       
  stages        Stage[]   
  labor         Labor[] 
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt  
}

enum PaymentPeriod {
  HOURLY
  DAILY
  MONTHLY
}

model Labor {
  id          String    @id @default(cuid())
  worker      Worker    @relation(fields: [workerId], references: [id])
  workerId    String
  stage       Stage     @relation(fields: [stageId], references: [id])
  stageId     String
  date        DateTime  // When the work was performed
  hours       Float?    // Optional: Number of hours worked (for hourly workers)
  days        Float?    // Optional: Number of days worked (for daily workers)
  rate        Float?   // Rate based on payment period (hourly/daily/monthly)
  periodType  PaymentPeriod // Type of payment for this specific work period
  notes       String?  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt 
  
  @@index([date])       
}
model ProductionOutput {
  id            String     @id @default(cuid())
  name          String
  description   String?
  quantity      Float
  unit          String
  pricePerUnit  Float
  totalValue    Float
  production    Production @relation(fields: [productionId], references: [id], onDelete: Cascade)
  productionId  String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}


model Waste {
  id            String     @id @default(cuid())
  quantity      Float
  unit          String
  description   String?
  date          DateTime   @default(now())
  production    Production @relation(fields: [productionId], references: [id])
  productionId  String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}
model Transaction {
  id            String            @id @default(cuid())
  type          TransactionType
  fundingSourceId String?       // Link to the funding source if this transaction uses specific funds
  fundingSource FundingSource?  @relation(fields: [fundingSourceId], references: [id])
  status        TransactionStatus @default(PENDING)
  total         Float
  paid          Float            @default(0)
  notes         String?
  
  businessId    String
  business      Business          @relation(fields: [businessId], references: [id])
  customerId    String?          
  customer      Customer?         @relation(fields: [customerId], references: [id])
  supplierId    String?
  supplier      Supplier?         @relation(fields: [supplierId], references: [id])
  
  items         TransactionItem[]
  payments      Payment[]
  debt          Debt?
  
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@index([businessId])
  @@index([customerId])
  @@index([supplierId])
}
model FundingSource {
  id          String      @id @default(cuid())
  type        FundingType
  name        String      // e.g., "KCB Bank Loan", "Business Grant A"
  description String?
  provider    String      // e.g., "KCB Bank", "Government", "Angel Investor"
  amount      Float
  terms       Json?       // For storing flexible terms (interest rates, repayment schedule, etc.)
  status      String?     // e.g., "ACTIVE", "REPAID", "PENDING"
  startDate   DateTime    @default(now())
  endDate     DateTime?   // Optional end date for loans or time-bound funding
  businessId  String
  business    Business    @relation(fields: [businessId], references: [id])
  transactions Transaction[] // Link to transactions for tracking usage
  expenditures Expenditure[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([businessId])
}

enum FundingType {
  OPENING_BALANCE
  SAVINGS
  PERSONAL_FUNDS
  GRANT
  BUSINESS_OPERATIONS
  SALE
  PURCHASE
  RETURN
  TRANSFER
  CREDIT
  GIFT
  LOAN
  INVESTMENT
  EXPENSE
  OTHER
}

enum TransactionType  {
  CREDIT 
  DEBIT 
  WITHDRAWAL 
  TRANSFER
  REFUND 
  PAYMENT 
  LOAN
  SALARY 
  COMMISSION 
  DIVIDEND 
  EXPENSE
  PURCHASE
  RETURN
  SALE
  OTHER
}


model TransactionItem {
  id            String      @id @default(cuid())
  quantity      Int
  price         Float
  total         Float
  
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  productId     String
  product       Product     @relation(fields: [productId], references: [id])
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Payment {
  id            String        @id @default(cuid())
  amount        Float
  method        PaymentMethod
  reference     String?
  paymentStatus PaymentStatus @default(PAID)
  
  orderId       String      @unique
  order         DeliveryOrder @relation(fields: [orderId], references: [id])
  transactionId String
  transaction   Transaction   @relation(fields: [transactionId], references: [id])
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}
enum PaymentStatus {
  PAID
  PENDING
  PARTIAL
  OVERDUE
  CANCELLED
}
model Debt {
  id            String      @id @default(cuid())
  amount        Float
  dueDate       DateTime
  status        DebtStatus  @default(PENDING)
  notes         String?
  
  businessId    String
  business      Business          @relation(fields: [businessId], references: [id])
  customerId    String? 
  customerName String?
  customerPhoneNumber String?
  customer      Customer?   @relation(fields: [customerId], references: [id])
  transactionId String      @unique
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}


// Subscription models (modified from original)
model Plan {
  id            String         @id @default(cuid())
  name          String
  description   String
  price         Float
  duration      Int           // Duration in days
  maxBusinesses Int           @default(1)
  features      String[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
}

model Subscription {
  id          String              @id @default(cuid())
  businessId  String              @unique
  business    Business            @relation(fields: [businessId], references: [id])
  planId      String
  plan        Plan                @relation(fields: [planId], references: [id])
  status      SubscriptionStatus
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

enum BusinessRole {
  OWNER
  ADMIN
  MANAGER
  STAFF
}


enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  MOBILE_MONEY
  OTHER
}

enum DebtStatus {
  PENDING
  PARTIAL
  PAID
  OVERDUE
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

enum StageStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  SKIPPED
}

enum ResourceType {
  RAW_MATERIAL    // Seeds, raw ingredients
  EQUIPMENT       // Tools, machines
  SUPPLIES        // Packaging, containers
  UTILITIES       // Water, electricity
  CHEMICALS       // Fertilizers, pesticides
  OTHER           // Miscellaneous resources
}


