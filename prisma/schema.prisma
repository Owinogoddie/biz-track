generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// uth-related models
model User {
  id               String            @id @unique @default(uuid())
  email            String            @unique
  hashedPassword   String?
  name             String?
  picture          String?
  role             UserRole          @default(USER)
  emailVerified    Boolean           @default(false)
  verificationCode VerificationCode?
  
  businesses       BusinessUser[]    // User can belong to multiple businesses
  ownedBusinesses  Business[]        // Businesses owned by user
  
  sessions        Session[]
  oauthAccounts   OAuthAccount[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model VerificationCode {
  id        String   @id @default(uuid())
  code      String
  userId    String   @unique
  email     String
  type      String?
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @unique @default(uuid())
  userId       String
  expiresAt    DateTime
  sessionToken String?  @unique
  accessToken  String?  @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OAuthAccount {
  provider       String
  providerUserId String
  refreshToken   String?
  userId         String
  user           User    @relation(fields: [userId], references: [id])

  @@id([provider, providerUserId])
}

// models for business system
model Business {
  id            String         @id @default(cuid())
  name          String
  description   String?
  logo          String?
  domain        String?        @unique  // Domain is now part of business
  
  // Business details
  address       String?
  phone         String?
  email         String?
  website       String?
  
  // Relations
  ownerId       String
  owner         User           @relation(fields: [ownerId], references: [id])
  users         BusinessUser[]
  products      Product[]
  categories    Category[]
  suppliers     Supplier[]
  customers     Customer[]
  transactions  Transaction[]
  subscription  Subscription?

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model BusinessUser {
  id          String       @id @default(cuid())
  businessId  String
  userId      String
  role        BusinessRole @default(STAFF)
  
  business    Business     @relation(fields: [businessId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([businessId, userId])
}



model Product {
  id          String        @id @default(cuid())
  name        String
  sku         String?       @unique
  barcode     String?       @unique
  description String?
  price       Float
  cost        Float
  quantity    Int
  minQuantity Int          @default(0)
  
  businessId  String
  business    Business      @relation(fields: [businessId], references: [id])
  categoryId  String?
  category    Category?     @relation(fields: [categoryId], references: [id])
  
  transactions TransactionItem[]
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  
  businessId  String
  business    Business  @relation(fields: [businessId], references: [id])
  products    Product[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([businessId, name])
}

model Supplier {
  id          String        @id @default(cuid())
  name        String
  email       String?
  phone       String?
  address     String?
  
  businessId  String
  business    Business      @relation(fields: [businessId], references: [id])
  transactions Transaction[]
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Customer {
  id          String        @id @default(cuid())
  name        String
  email       String?
  phone       String?
  address     String?
  creditLimit Float         @default(0)
  
  businessId  String
  business    Business      @relation(fields: [businessId], references: [id])
  transactions Transaction[]
  debts       Debt[]
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Transaction {
  id            String            @id @default(cuid())
  type          TransactionType
  status        TransactionStatus @default(PENDING)
  total         Float
  paid          Float            @default(0)
  notes         String?
  
  businessId    String
  business      Business          @relation(fields: [businessId], references: [id])
  customerId    String?           // Made optional
  customer      Customer?         @relation(fields: [customerId], references: [id])
  supplierId    String?
  supplier      Supplier?         @relation(fields: [supplierId], references: [id])
  
  items         TransactionItem[]
  payments      Payment[]
  debt          Debt?
  
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model TransactionItem {
  id            String      @id @default(cuid())
  quantity      Int
  price         Float
  total         Float
  
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  productId     String
  product       Product     @relation(fields: [productId], references: [id])
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Payment {
  id            String        @id @default(cuid())
  amount        Float
  method        PaymentMethod
  reference     String?
  
  transactionId String
  transaction   Transaction   @relation(fields: [transactionId], references: [id])
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Debt {
  id            String      @id @default(cuid())
  amount        Float
  dueDate       DateTime
  status        DebtStatus  @default(PENDING)
  notes         String?
  
  customerId    String? 
  customerName String?
  customerPhoneNumber String?
  customer      Customer?   @relation(fields: [customerId], references: [id])
  transactionId String      @unique
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}


// Subscription models (modified from original)
model Plan {
  id            String         @id @default(cuid())
  name          String
  description   String
  price         Float
  duration      Int           // Duration in days
  maxBusinesses Int           @default(1)
  features      String[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
}

model Subscription {
  id          String              @id @default(cuid())
  businessId  String              @unique
  business    Business            @relation(fields: [businessId], references: [id])
  planId      String
  plan        Plan                @relation(fields: [planId], references: [id])
  status      SubscriptionStatus
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

enum BusinessRole {
  OWNER
  ADMIN
  MANAGER
  STAFF
}

enum TransactionType {
  SALE
  PURCHASE
  RETURN
  TRANSFER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  MOBILE_MONEY
  OTHER
}

enum DebtStatus {
  PENDING
  PARTIAL
  PAID
  OVERDUE
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}